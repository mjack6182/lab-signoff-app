name: Auto PR to dev on push

on:
  push:
    # Create/refresh PRs for any branch EXCEPT main/dev and release/*
    branches-ignore:
      - dev
      - main
      - "release/**"

jobs:
  auto-pr:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Create or update PR to dev
        uses: actions/github-script@v7
        with:
          script: |
            const base = 'dev'; // target branch
            const head = context.ref.replace('refs/heads/','');

            // Safety: never PR from dev/main to dev
            if (['dev','main'].includes(head) || head.startsWith('release/')) {
              core.info(`Skip: ${head} is ignored.`);
              return;
            }

            // Is there already an open PR from this head -> base?
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              head: `${context.repo.owner}:${head}`,
              base
            });

            // Build a tidy title/body from recent commits
            const commits = await github.paginate(github.rest.repos.listCommits, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: head,
              per_page: 100
            });

            const latest = commits[0];
            const title = `Auto PR: ${head} → ${base} — ${latest?.commit?.message?.split('\n')[0] ?? 'update'}`;
            const bodyLines = [
              `This PR was automatically opened/updated because **${head}** received a push.`,
              '',
              '### Recent commits',
              ...commits.slice(0, 20).map(c => `- ${c.sha.slice(0,7)} ${c.commit.message.split('\n')[0]}${c.author?.login ? ` (@${c.author.login})` : ''}`),
              commits.length > 20 ? '\n…(truncated)' : ''
            ];

            if (prs.length > 0) {
              const pr = prs[0];
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                title,
                body: bodyLines.join('\n')
              });
              core.info(`Updated PR #${pr.number}`);
            } else {
              const { data: pr } = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                head,
                base,
                title,
                body: bodyLines.join('\n'),
                draft: false,
                maintainer_can_modify: true
              });
              core.info(`Created PR #${pr.number}`);

              // Optional niceties: labels & reviewers
              try {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  labels: ['auto-pr']
                });
              } catch(e) { core.info('No label added (label may not exist).'); }

              // Add human reviewers or a team (adjust to your org/users)
              // await github.rest.pulls.requestReviewers({
              //   owner: context.repo.owner,
              //   repo: context.repo.repo,
              //   pull_number: pr.number,
              //   reviewers: ['your-github-handle'],
              //   team_reviewers: ['your-team-slug']
              // });
            }
